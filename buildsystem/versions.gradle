/*
 * Copyright (C) 2018 The Android Open Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


/**
 * Shared file between builds so that they can all use the same dependencies and
 * maven repositories.
 **/

ext.deps = [:]
def versions = [:]
// component
versions.recyclerview = "1.1.0-beta04"
versions.cardview = "1.0.0"
versions.swiperefreshlayout = "1.0.0"
versions.material = "1.2.1"
versions.constraintlayout = "2.0.4"

// support
versions.annotation = "1.0.0"
versions.appcompat = "1.2.0"

versions.room = "2.2.5"
versions.lifecycle = "2.2.0"
versions.dagger = "2.24"
versions.junit = "4.13.1"
versions.espresso = "3.3.0"
versions.retrofit = "2.6.2"
versions.okhttp_logging_interceptor = "4.2.2"
versions.glide = "4.11.0"
versions.gson = "2.8.6"
versions.mockito = "2.23.0"
versions.worker = "1.0.0"
versions.work_manager = "2.4.0"
versions.kotlin = "1.4.10"
versions.android_core = "1.3.2"
versions.databinding_compiler = "3.1.4"
versions.kotlinx_coroutines = "1.3.9"
versions.google_map = "17.0.0"
versions.navigation = "2.3.1"

def deps = [:]

def support = [:]
support.annotation = "androidx.annotation:annotation:$versions.annotation"
support.appcompat = "androidx.appcompat:appcompat:$versions.appcompat"
support.recyclerview = "androidx.recyclerview:recyclerview:$versions.recyclerview"
support.cardview = "androidx.cardview:cardview:$versions.cardview"
support.material = "com.google.android.material:material:$versions.material"
support.constraintlayout = "androidx.constraintlayout:constraintlayout:$versions.constraintlayout"
support.swiperefreshlayout = "androidx.swiperefreshlayout:swiperefreshlayout:$versions.swiperefreshlayout"
deps.support = support

def room = [:]
room.runtime = "androidx.room:room-runtime:$versions.room"
room.compiler = "androidx.room:room-compiler:$versions.room"
room.rxjava2 = "androidx.room:room-rxjava2:$versions.room"
room.testing = "androidx.room:room-testing:$versions.room"
room.ktx = "androidx.room:room-ktx:$versions.room"
deps.room = room

def lifecycle = [:]
lifecycle.runtime = "androidx.lifecycle:lifecycle-runtime:$versions.lifecycle"
lifecycle.extensions = "androidx.lifecycle:lifecycle-extensions:$versions.lifecycle"
lifecycle.java8 = "androidx.lifecycle:lifecycle-common-java8:$versions.lifecycle"
lifecycle.compiler = "androidx.lifecycle:lifecycle-compiler:$versions.lifecycle"
lifecycle.livedata_ktx = "androidx.lifecycle:lifecycle-livedata-ktx:$versions.lifecycle"
lifecycle.viewmodel_ktx = "androidx.lifecycle:lifecycle-viewmodel-ktx:$versions.lifecycle"
deps.lifecycle = lifecycle

def retrofit = [:]
retrofit.runtime = "com.squareup.retrofit2:retrofit:$versions.retrofit"
retrofit.gson = "com.squareup.retrofit2:converter-gson:$versions.retrofit"
retrofit.xml = "com.squareup.retrofit2:converter-simplexml:$versions.retrofit"
retrofit.rxjava = "com.squareup.retrofit2:adapter-rxjava2:$versions.retrofit"
retrofit.mock = "com.squareup.retrofit2:retrofit-mock:$versions.retrofit"
retrofit.scalar = "com.squareup.retrofit2:converter-scalars:$versions.retrofit"
deps.retrofit = retrofit
deps.okhttp_logging_interceptor = "com.squareup.okhttp3:logging-interceptor:${versions.okhttp_logging_interceptor}"

def dagger = [:]
dagger.runtime = "com.google.dagger:dagger:$versions.dagger"
dagger.android = "com.google.dagger:dagger-android:$versions.dagger"
dagger.android_support = "com.google.dagger:dagger-android-support:$versions.dagger"
dagger.compiler = "com.google.dagger:dagger-compiler:$versions.dagger"
dagger.android_support_compiler = "com.google.dagger:dagger-android-processor:$versions.dagger"

deps.dagger = dagger

def espresso = [:]
espresso.core = "androidx.test.espresso:espresso-core:$versions.espresso"
espresso.contrib = "androidx.test.espresso:espresso-contrib:$versions.espresso"
espresso.intents = "androidx.test.espresso:espresso-intents:$versions.espresso"
deps.espresso = espresso

def mockito = [:]
mockito.core = "org.mockito:mockito-core:$versions.mockito"
mockito.inline = "org.mockito:mockito-inline:$versions.mockito"
mockito.test = "org.mockito:mockito-android:$versions.mockito"
deps.mockito = mockito

def worker = [:]
worker.runtime = "android.arch.work:work-runtime:$versions.worker"
deps.worker = worker

def kotlin = [:]
kotlin.stdlib = "org.jetbrains.kotlin:kotlin-stdlib:$versions.kotlin"
kotlin.coroutines_core = "org.jetbrains.kotlinx:kotlinx-coroutines-core:$versions.kotlinx_coroutines"
kotlin.coroutines_android = "org.jetbrains.kotlinx:kotlinx-coroutines-android:$versions.kotlinx_coroutines"
deps.kotlin = kotlin

def glide = [:]
glide.runtime = "com.github.bumptech.glide:glide:$versions.glide"
glide.compiler = "com.github.bumptech.glide:compiler:$versions.glide"
deps.glide = glide

def gle = [:]
gle.map = "com.google.android.gms:play-services-maps:$versions.google_map"
deps.gle = gle

def databinding = [:]
databinding.compiler = "com.android.databinding:compiler:3.1.4"
deps.databinding = databinding

def navigation = [:]
navigation.fragment = "androidx.navigation:navigation-fragment:$versions.navigation"
navigation.ui = "androidx.navigation:navigation-ui:$versions.navigation"
navigation.fragment_ktx = "androidx.navigation:navigation-fragment-ktx:$versions.navigation"
navigation.ui_ktx = "androidx.navigation:navigation-ui-ktx:$versions.navigation"
navigation.features = "androidx.navigation:navigation-dynamic-features-fragment:$versions.navigation"
navigation.testing = "androidx.navigation:navigation-testing:$versions.navigation"
navigation.jetpack_compose = "androidx.navigation:navigation-compose:1.0.0-alpha01"
deps.navigation = navigation

def junit = [:]
junit.runtime = "junit:junit:$versions.junit"
junit.test_ext = "androidx.test.ext:junit:1.1.2"
deps.junit = junit

deps.gson = "com.google.code.gson:gson:$versions.gson"
deps.work_manager = "androidx.work:work-runtime:$versions.work_manager"
deps.work_manager_ktx = "androidx.work:work-runtime-ktx:$versions.work_manager"
deps.android_core_ktx = "androidx.core:core-ktx:$versions.android_core"
deps.databinding_compiler = "com.android.databinding:compiler:$versions.databinding_compiler"
deps.mockwebserver = 'com.squareup.okhttp3:mockwebserver:3.6.0'

ext.deps = deps

def addRepos(RepositoryHandler handler) {
    handler.google()
    handler.jcenter()
    handler.maven { url 'https://oss.sonatype.org/content/repositories/snapshots' }
}

ext.addRepos = this.&addRepos